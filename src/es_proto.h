/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ClientMessageDtos.proto */

#ifndef PROTOBUF_C_ClientMessageDtos_2eproto__INCLUDED
#define PROTOBUF_C_ClientMessageDtos_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _EventStore__Client__Messages__NewEvent EventStore__Client__Messages__NewEvent;
typedef struct _EventStore__Client__Messages__EventRecord EventStore__Client__Messages__EventRecord;
typedef struct _EventStore__Client__Messages__ResolvedIndexedEvent EventStore__Client__Messages__ResolvedIndexedEvent;
typedef struct _EventStore__Client__Messages__ResolvedEvent EventStore__Client__Messages__ResolvedEvent;
typedef struct _EventStore__Client__Messages__WriteEvents EventStore__Client__Messages__WriteEvents;
typedef struct _EventStore__Client__Messages__WriteEventsCompleted EventStore__Client__Messages__WriteEventsCompleted;
typedef struct _EventStore__Client__Messages__DeleteStream EventStore__Client__Messages__DeleteStream;
typedef struct _EventStore__Client__Messages__DeleteStreamCompleted EventStore__Client__Messages__DeleteStreamCompleted;
typedef struct _EventStore__Client__Messages__TransactionStart EventStore__Client__Messages__TransactionStart;
typedef struct _EventStore__Client__Messages__TransactionStartCompleted EventStore__Client__Messages__TransactionStartCompleted;
typedef struct _EventStore__Client__Messages__TransactionWrite EventStore__Client__Messages__TransactionWrite;
typedef struct _EventStore__Client__Messages__TransactionWriteCompleted EventStore__Client__Messages__TransactionWriteCompleted;
typedef struct _EventStore__Client__Messages__TransactionCommit EventStore__Client__Messages__TransactionCommit;
typedef struct _EventStore__Client__Messages__TransactionCommitCompleted EventStore__Client__Messages__TransactionCommitCompleted;
typedef struct _EventStore__Client__Messages__ReadEvent EventStore__Client__Messages__ReadEvent;
typedef struct _EventStore__Client__Messages__ReadEventCompleted EventStore__Client__Messages__ReadEventCompleted;
typedef struct _EventStore__Client__Messages__ReadStreamEvents EventStore__Client__Messages__ReadStreamEvents;
typedef struct _EventStore__Client__Messages__ReadStreamEventsCompleted EventStore__Client__Messages__ReadStreamEventsCompleted;
typedef struct _EventStore__Client__Messages__ReadAllEvents EventStore__Client__Messages__ReadAllEvents;
typedef struct _EventStore__Client__Messages__ReadAllEventsCompleted EventStore__Client__Messages__ReadAllEventsCompleted;
typedef struct _EventStore__Client__Messages__CreatePersistentSubscription EventStore__Client__Messages__CreatePersistentSubscription;
typedef struct _EventStore__Client__Messages__DeletePersistentSubscription EventStore__Client__Messages__DeletePersistentSubscription;
typedef struct _EventStore__Client__Messages__UpdatePersistentSubscription EventStore__Client__Messages__UpdatePersistentSubscription;
typedef struct _EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted;
typedef struct _EventStore__Client__Messages__CreatePersistentSubscriptionCompleted EventStore__Client__Messages__CreatePersistentSubscriptionCompleted;
typedef struct _EventStore__Client__Messages__DeletePersistentSubscriptionCompleted EventStore__Client__Messages__DeletePersistentSubscriptionCompleted;
typedef struct _EventStore__Client__Messages__ConnectToPersistentSubscription EventStore__Client__Messages__ConnectToPersistentSubscription;
typedef struct _EventStore__Client__Messages__PersistentSubscriptionAckEvents EventStore__Client__Messages__PersistentSubscriptionAckEvents;
typedef struct _EventStore__Client__Messages__PersistentSubscriptionNakEvents EventStore__Client__Messages__PersistentSubscriptionNakEvents;
typedef struct _EventStore__Client__Messages__PersistentSubscriptionConfirmation EventStore__Client__Messages__PersistentSubscriptionConfirmation;
typedef struct _EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared;
typedef struct _EventStore__Client__Messages__SubscribeToStream EventStore__Client__Messages__SubscribeToStream;
typedef struct _EventStore__Client__Messages__SubscriptionConfirmation EventStore__Client__Messages__SubscriptionConfirmation;
typedef struct _EventStore__Client__Messages__StreamEventAppeared EventStore__Client__Messages__StreamEventAppeared;
typedef struct _EventStore__Client__Messages__UnsubscribeFromStream EventStore__Client__Messages__UnsubscribeFromStream;
typedef struct _EventStore__Client__Messages__SubscriptionDropped EventStore__Client__Messages__SubscriptionDropped;
typedef struct _EventStore__Client__Messages__NotHandled EventStore__Client__Messages__NotHandled;
typedef struct _EventStore__Client__Messages__NotHandled__MasterInfo EventStore__Client__Messages__NotHandled__MasterInfo;
typedef struct _EventStore__Client__Messages__ScavengeDatabase EventStore__Client__Messages__ScavengeDatabase;
typedef struct _EventStore__Client__Messages__ScavengeDatabaseCompleted EventStore__Client__Messages__ScavengeDatabaseCompleted;


/* --- enums --- */

typedef enum _EventStore__Client__Messages__ReadEventCompleted__ReadEventResult {
  EVENT_STORE__CLIENT__MESSAGES__READ_EVENT_COMPLETED__READ_EVENT_RESULT__Success = 0,
  EVENT_STORE__CLIENT__MESSAGES__READ_EVENT_COMPLETED__READ_EVENT_RESULT__NotFound = 1,
  EVENT_STORE__CLIENT__MESSAGES__READ_EVENT_COMPLETED__READ_EVENT_RESULT__NoStream = 2,
  EVENT_STORE__CLIENT__MESSAGES__READ_EVENT_COMPLETED__READ_EVENT_RESULT__StreamDeleted = 3,
  EVENT_STORE__CLIENT__MESSAGES__READ_EVENT_COMPLETED__READ_EVENT_RESULT__Error = 4,
  EVENT_STORE__CLIENT__MESSAGES__READ_EVENT_COMPLETED__READ_EVENT_RESULT__AccessDenied = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_STORE__CLIENT__MESSAGES__READ_EVENT_COMPLETED__READ_EVENT_RESULT)
} EventStore__Client__Messages__ReadEventCompleted__ReadEventResult;
typedef enum _EventStore__Client__Messages__ReadStreamEventsCompleted__ReadStreamResult {
  EVENT_STORE__CLIENT__MESSAGES__READ_STREAM_EVENTS_COMPLETED__READ_STREAM_RESULT__Success = 0,
  EVENT_STORE__CLIENT__MESSAGES__READ_STREAM_EVENTS_COMPLETED__READ_STREAM_RESULT__NoStream = 1,
  EVENT_STORE__CLIENT__MESSAGES__READ_STREAM_EVENTS_COMPLETED__READ_STREAM_RESULT__StreamDeleted = 2,
  EVENT_STORE__CLIENT__MESSAGES__READ_STREAM_EVENTS_COMPLETED__READ_STREAM_RESULT__NotModified = 3,
  EVENT_STORE__CLIENT__MESSAGES__READ_STREAM_EVENTS_COMPLETED__READ_STREAM_RESULT__Error = 4,
  EVENT_STORE__CLIENT__MESSAGES__READ_STREAM_EVENTS_COMPLETED__READ_STREAM_RESULT__AccessDenied = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_STORE__CLIENT__MESSAGES__READ_STREAM_EVENTS_COMPLETED__READ_STREAM_RESULT)
} EventStore__Client__Messages__ReadStreamEventsCompleted__ReadStreamResult;
typedef enum _EventStore__Client__Messages__ReadAllEventsCompleted__ReadAllResult {
  EVENT_STORE__CLIENT__MESSAGES__READ_ALL_EVENTS_COMPLETED__READ_ALL_RESULT__Success = 0,
  EVENT_STORE__CLIENT__MESSAGES__READ_ALL_EVENTS_COMPLETED__READ_ALL_RESULT__NotModified = 1,
  EVENT_STORE__CLIENT__MESSAGES__READ_ALL_EVENTS_COMPLETED__READ_ALL_RESULT__Error = 2,
  EVENT_STORE__CLIENT__MESSAGES__READ_ALL_EVENTS_COMPLETED__READ_ALL_RESULT__AccessDenied = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_STORE__CLIENT__MESSAGES__READ_ALL_EVENTS_COMPLETED__READ_ALL_RESULT)
} EventStore__Client__Messages__ReadAllEventsCompleted__ReadAllResult;
typedef enum _EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted__UpdatePersistentSubscriptionResult {
  EVENT_STORE__CLIENT__MESSAGES__UPDATE_PERSISTENT_SUBSCRIPTION_COMPLETED__UPDATE_PERSISTENT_SUBSCRIPTION_RESULT__Success = 0,
  EVENT_STORE__CLIENT__MESSAGES__UPDATE_PERSISTENT_SUBSCRIPTION_COMPLETED__UPDATE_PERSISTENT_SUBSCRIPTION_RESULT__DoesNotExist = 1,
  EVENT_STORE__CLIENT__MESSAGES__UPDATE_PERSISTENT_SUBSCRIPTION_COMPLETED__UPDATE_PERSISTENT_SUBSCRIPTION_RESULT__Fail = 2,
  EVENT_STORE__CLIENT__MESSAGES__UPDATE_PERSISTENT_SUBSCRIPTION_COMPLETED__UPDATE_PERSISTENT_SUBSCRIPTION_RESULT__AccessDenied = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_STORE__CLIENT__MESSAGES__UPDATE_PERSISTENT_SUBSCRIPTION_COMPLETED__UPDATE_PERSISTENT_SUBSCRIPTION_RESULT)
} EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted__UpdatePersistentSubscriptionResult;
typedef enum _EventStore__Client__Messages__CreatePersistentSubscriptionCompleted__CreatePersistentSubscriptionResult {
  EVENT_STORE__CLIENT__MESSAGES__CREATE_PERSISTENT_SUBSCRIPTION_COMPLETED__CREATE_PERSISTENT_SUBSCRIPTION_RESULT__Success = 0,
  EVENT_STORE__CLIENT__MESSAGES__CREATE_PERSISTENT_SUBSCRIPTION_COMPLETED__CREATE_PERSISTENT_SUBSCRIPTION_RESULT__AlreadyExists = 1,
  EVENT_STORE__CLIENT__MESSAGES__CREATE_PERSISTENT_SUBSCRIPTION_COMPLETED__CREATE_PERSISTENT_SUBSCRIPTION_RESULT__Fail = 2,
  EVENT_STORE__CLIENT__MESSAGES__CREATE_PERSISTENT_SUBSCRIPTION_COMPLETED__CREATE_PERSISTENT_SUBSCRIPTION_RESULT__AccessDenied = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_STORE__CLIENT__MESSAGES__CREATE_PERSISTENT_SUBSCRIPTION_COMPLETED__CREATE_PERSISTENT_SUBSCRIPTION_RESULT)
} EventStore__Client__Messages__CreatePersistentSubscriptionCompleted__CreatePersistentSubscriptionResult;
typedef enum _EventStore__Client__Messages__DeletePersistentSubscriptionCompleted__DeletePersistentSubscriptionResult {
  EVENT_STORE__CLIENT__MESSAGES__DELETE_PERSISTENT_SUBSCRIPTION_COMPLETED__DELETE_PERSISTENT_SUBSCRIPTION_RESULT__Success = 0,
  EVENT_STORE__CLIENT__MESSAGES__DELETE_PERSISTENT_SUBSCRIPTION_COMPLETED__DELETE_PERSISTENT_SUBSCRIPTION_RESULT__DoesNotExist = 1,
  EVENT_STORE__CLIENT__MESSAGES__DELETE_PERSISTENT_SUBSCRIPTION_COMPLETED__DELETE_PERSISTENT_SUBSCRIPTION_RESULT__Fail = 2,
  EVENT_STORE__CLIENT__MESSAGES__DELETE_PERSISTENT_SUBSCRIPTION_COMPLETED__DELETE_PERSISTENT_SUBSCRIPTION_RESULT__AccessDenied = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_STORE__CLIENT__MESSAGES__DELETE_PERSISTENT_SUBSCRIPTION_COMPLETED__DELETE_PERSISTENT_SUBSCRIPTION_RESULT)
} EventStore__Client__Messages__DeletePersistentSubscriptionCompleted__DeletePersistentSubscriptionResult;
typedef enum _EventStore__Client__Messages__PersistentSubscriptionNakEvents__NakAction {
  EVENT_STORE__CLIENT__MESSAGES__PERSISTENT_SUBSCRIPTION_NAK_EVENTS__NAK_ACTION__Unknown = 0,
  EVENT_STORE__CLIENT__MESSAGES__PERSISTENT_SUBSCRIPTION_NAK_EVENTS__NAK_ACTION__Park = 1,
  EVENT_STORE__CLIENT__MESSAGES__PERSISTENT_SUBSCRIPTION_NAK_EVENTS__NAK_ACTION__Retry = 2,
  EVENT_STORE__CLIENT__MESSAGES__PERSISTENT_SUBSCRIPTION_NAK_EVENTS__NAK_ACTION__Skip = 3,
  EVENT_STORE__CLIENT__MESSAGES__PERSISTENT_SUBSCRIPTION_NAK_EVENTS__NAK_ACTION__Stop = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_STORE__CLIENT__MESSAGES__PERSISTENT_SUBSCRIPTION_NAK_EVENTS__NAK_ACTION)
} EventStore__Client__Messages__PersistentSubscriptionNakEvents__NakAction;
typedef enum _EventStore__Client__Messages__SubscriptionDropped__SubscriptionDropReason {
  EVENT_STORE__CLIENT__MESSAGES__SUBSCRIPTION_DROPPED__SUBSCRIPTION_DROP_REASON__Unsubscribed = 0,
  EVENT_STORE__CLIENT__MESSAGES__SUBSCRIPTION_DROPPED__SUBSCRIPTION_DROP_REASON__AccessDenied = 1,
  EVENT_STORE__CLIENT__MESSAGES__SUBSCRIPTION_DROPPED__SUBSCRIPTION_DROP_REASON__NotFound = 2,
  EVENT_STORE__CLIENT__MESSAGES__SUBSCRIPTION_DROPPED__SUBSCRIPTION_DROP_REASON__PersistentSubscriptionDeleted = 3,
  EVENT_STORE__CLIENT__MESSAGES__SUBSCRIPTION_DROPPED__SUBSCRIPTION_DROP_REASON__SubscriberMaxCountReached = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_STORE__CLIENT__MESSAGES__SUBSCRIPTION_DROPPED__SUBSCRIPTION_DROP_REASON)
} EventStore__Client__Messages__SubscriptionDropped__SubscriptionDropReason;
typedef enum _EventStore__Client__Messages__NotHandled__NotHandledReason {
  EVENT_STORE__CLIENT__MESSAGES__NOT_HANDLED__NOT_HANDLED_REASON__NotReady = 0,
  EVENT_STORE__CLIENT__MESSAGES__NOT_HANDLED__NOT_HANDLED_REASON__TooBusy = 1,
  EVENT_STORE__CLIENT__MESSAGES__NOT_HANDLED__NOT_HANDLED_REASON__NotMaster = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_STORE__CLIENT__MESSAGES__NOT_HANDLED__NOT_HANDLED_REASON)
} EventStore__Client__Messages__NotHandled__NotHandledReason;
typedef enum _EventStore__Client__Messages__ScavengeDatabaseCompleted__ScavengeResult {
  EVENT_STORE__CLIENT__MESSAGES__SCAVENGE_DATABASE_COMPLETED__SCAVENGE_RESULT__Success = 0,
  EVENT_STORE__CLIENT__MESSAGES__SCAVENGE_DATABASE_COMPLETED__SCAVENGE_RESULT__InProgress = 1,
  EVENT_STORE__CLIENT__MESSAGES__SCAVENGE_DATABASE_COMPLETED__SCAVENGE_RESULT__Failed = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_STORE__CLIENT__MESSAGES__SCAVENGE_DATABASE_COMPLETED__SCAVENGE_RESULT)
} EventStore__Client__Messages__ScavengeDatabaseCompleted__ScavengeResult;
typedef enum _EventStore__Client__Messages__OperationResult {
  EVENT_STORE__CLIENT__MESSAGES__OPERATION_RESULT__Success = 0,
  EVENT_STORE__CLIENT__MESSAGES__OPERATION_RESULT__PrepareTimeout = 1,
  EVENT_STORE__CLIENT__MESSAGES__OPERATION_RESULT__CommitTimeout = 2,
  EVENT_STORE__CLIENT__MESSAGES__OPERATION_RESULT__ForwardTimeout = 3,
  EVENT_STORE__CLIENT__MESSAGES__OPERATION_RESULT__WrongExpectedVersion = 4,
  EVENT_STORE__CLIENT__MESSAGES__OPERATION_RESULT__StreamDeleted = 5,
  EVENT_STORE__CLIENT__MESSAGES__OPERATION_RESULT__InvalidTransaction = 6,
  EVENT_STORE__CLIENT__MESSAGES__OPERATION_RESULT__AccessDenied = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_STORE__CLIENT__MESSAGES__OPERATION_RESULT)
} EventStore__Client__Messages__OperationResult;

/* --- messages --- */

struct  _EventStore__Client__Messages__NewEvent
{
  ProtobufCMessage base;
  ProtobufCBinaryData event_id;
  char *event_type;
  int32_t data_content_type;
  int32_t metadata_content_type;
  ProtobufCBinaryData data;
  protobuf_c_boolean has_metadata;
  ProtobufCBinaryData metadata;
};
#define EVENT_STORE__CLIENT__MESSAGES__NEW_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__new_event__descriptor) \
    , {0,NULL}, NULL, 0, 0, {0,NULL}, 0,{0,NULL} }


struct  _EventStore__Client__Messages__EventRecord
{
  ProtobufCMessage base;
  char *event_stream_id;
  int32_t event_number;
  ProtobufCBinaryData event_id;
  char *event_type;
  int32_t data_content_type;
  int32_t metadata_content_type;
  ProtobufCBinaryData data;
  protobuf_c_boolean has_metadata;
  ProtobufCBinaryData metadata;
  protobuf_c_boolean has_created;
  int64_t created;
  protobuf_c_boolean has_created_epoch;
  int64_t created_epoch;
};
#define EVENT_STORE__CLIENT__MESSAGES__EVENT_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__event_record__descriptor) \
    , NULL, 0, {0,NULL}, NULL, 0, 0, {0,NULL}, 0,{0,NULL}, 0,0, 0,0 }


struct  _EventStore__Client__Messages__ResolvedIndexedEvent
{
  ProtobufCMessage base;
  EventStore__Client__Messages__EventRecord *event;
  EventStore__Client__Messages__EventRecord *link;
};
#define EVENT_STORE__CLIENT__MESSAGES__RESOLVED_INDEXED_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__resolved_indexed_event__descriptor) \
    , NULL, NULL }


struct  _EventStore__Client__Messages__ResolvedEvent
{
  ProtobufCMessage base;
  EventStore__Client__Messages__EventRecord *event;
  EventStore__Client__Messages__EventRecord *link;
  int64_t commit_position;
  int64_t prepare_position;
};
#define EVENT_STORE__CLIENT__MESSAGES__RESOLVED_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__resolved_event__descriptor) \
    , NULL, NULL, 0, 0 }


struct  _EventStore__Client__Messages__WriteEvents
{
  ProtobufCMessage base;
  char *event_stream_id;
  int32_t expected_version;
  size_t n_events;
  EventStore__Client__Messages__NewEvent **events;
  protobuf_c_boolean require_master;
};
#define EVENT_STORE__CLIENT__MESSAGES__WRITE_EVENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__write_events__descriptor) \
    , NULL, 0, 0,NULL, 0 }


struct  _EventStore__Client__Messages__WriteEventsCompleted
{
  ProtobufCMessage base;
  EventStore__Client__Messages__OperationResult result;
  char *message;
  int32_t first_event_number;
  int32_t last_event_number;
  protobuf_c_boolean has_prepare_position;
  int64_t prepare_position;
  protobuf_c_boolean has_commit_position;
  int64_t commit_position;
};
#define EVENT_STORE__CLIENT__MESSAGES__WRITE_EVENTS_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__write_events_completed__descriptor) \
    , 0, NULL, 0, 0, 0,0, 0,0 }


struct  _EventStore__Client__Messages__DeleteStream
{
  ProtobufCMessage base;
  char *event_stream_id;
  int32_t expected_version;
  protobuf_c_boolean require_master;
  protobuf_c_boolean has_hard_delete;
  protobuf_c_boolean hard_delete;
};
#define EVENT_STORE__CLIENT__MESSAGES__DELETE_STREAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__delete_stream__descriptor) \
    , NULL, 0, 0, 0,0 }


struct  _EventStore__Client__Messages__DeleteStreamCompleted
{
  ProtobufCMessage base;
  EventStore__Client__Messages__OperationResult result;
  char *message;
  protobuf_c_boolean has_prepare_position;
  int64_t prepare_position;
  protobuf_c_boolean has_commit_position;
  int64_t commit_position;
};
#define EVENT_STORE__CLIENT__MESSAGES__DELETE_STREAM_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__delete_stream_completed__descriptor) \
    , 0, NULL, 0,0, 0,0 }


struct  _EventStore__Client__Messages__TransactionStart
{
  ProtobufCMessage base;
  char *event_stream_id;
  int32_t expected_version;
  protobuf_c_boolean require_master;
};
#define EVENT_STORE__CLIENT__MESSAGES__TRANSACTION_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__transaction_start__descriptor) \
    , NULL, 0, 0 }


struct  _EventStore__Client__Messages__TransactionStartCompleted
{
  ProtobufCMessage base;
  int64_t transaction_id;
  EventStore__Client__Messages__OperationResult result;
  char *message;
};
#define EVENT_STORE__CLIENT__MESSAGES__TRANSACTION_START_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__transaction_start_completed__descriptor) \
    , 0, 0, NULL }


struct  _EventStore__Client__Messages__TransactionWrite
{
  ProtobufCMessage base;
  int64_t transaction_id;
  size_t n_events;
  EventStore__Client__Messages__NewEvent **events;
  protobuf_c_boolean require_master;
};
#define EVENT_STORE__CLIENT__MESSAGES__TRANSACTION_WRITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__transaction_write__descriptor) \
    , 0, 0,NULL, 0 }


struct  _EventStore__Client__Messages__TransactionWriteCompleted
{
  ProtobufCMessage base;
  int64_t transaction_id;
  EventStore__Client__Messages__OperationResult result;
  char *message;
};
#define EVENT_STORE__CLIENT__MESSAGES__TRANSACTION_WRITE_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__transaction_write_completed__descriptor) \
    , 0, 0, NULL }


struct  _EventStore__Client__Messages__TransactionCommit
{
  ProtobufCMessage base;
  int64_t transaction_id;
  protobuf_c_boolean require_master;
};
#define EVENT_STORE__CLIENT__MESSAGES__TRANSACTION_COMMIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__transaction_commit__descriptor) \
    , 0, 0 }


struct  _EventStore__Client__Messages__TransactionCommitCompleted
{
  ProtobufCMessage base;
  int64_t transaction_id;
  EventStore__Client__Messages__OperationResult result;
  char *message;
  int32_t first_event_number;
  int32_t last_event_number;
  protobuf_c_boolean has_prepare_position;
  int64_t prepare_position;
  protobuf_c_boolean has_commit_position;
  int64_t commit_position;
};
#define EVENT_STORE__CLIENT__MESSAGES__TRANSACTION_COMMIT_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__transaction_commit_completed__descriptor) \
    , 0, 0, NULL, 0, 0, 0,0, 0,0 }


struct  _EventStore__Client__Messages__ReadEvent
{
  ProtobufCMessage base;
  char *event_stream_id;
  int32_t event_number;
  protobuf_c_boolean resolve_link_tos;
  protobuf_c_boolean require_master;
};
#define EVENT_STORE__CLIENT__MESSAGES__READ_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__read_event__descriptor) \
    , NULL, 0, 0, 0 }


struct  _EventStore__Client__Messages__ReadEventCompleted
{
  ProtobufCMessage base;
  EventStore__Client__Messages__ReadEventCompleted__ReadEventResult result;
  EventStore__Client__Messages__ResolvedIndexedEvent *event;
  char *error;
};
#define EVENT_STORE__CLIENT__MESSAGES__READ_EVENT_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__read_event_completed__descriptor) \
    , 0, NULL, NULL }


struct  _EventStore__Client__Messages__ReadStreamEvents
{
  ProtobufCMessage base;
  char *event_stream_id;
  int32_t from_event_number;
  int32_t max_count;
  protobuf_c_boolean resolve_link_tos;
  protobuf_c_boolean require_master;
};
#define EVENT_STORE__CLIENT__MESSAGES__READ_STREAM_EVENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__read_stream_events__descriptor) \
    , NULL, 0, 0, 0, 0 }


struct  _EventStore__Client__Messages__ReadStreamEventsCompleted
{
  ProtobufCMessage base;
  size_t n_events;
  EventStore__Client__Messages__ResolvedIndexedEvent **events;
  EventStore__Client__Messages__ReadStreamEventsCompleted__ReadStreamResult result;
  int32_t next_event_number;
  int32_t last_event_number;
  protobuf_c_boolean is_end_of_stream;
  int64_t last_commit_position;
  char *error;
};
#define EVENT_STORE__CLIENT__MESSAGES__READ_STREAM_EVENTS_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__read_stream_events_completed__descriptor) \
    , 0,NULL, 0, 0, 0, 0, 0, NULL }


struct  _EventStore__Client__Messages__ReadAllEvents
{
  ProtobufCMessage base;
  int64_t commit_position;
  int64_t prepare_position;
  int32_t max_count;
  protobuf_c_boolean resolve_link_tos;
  protobuf_c_boolean require_master;
};
#define EVENT_STORE__CLIENT__MESSAGES__READ_ALL_EVENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__read_all_events__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _EventStore__Client__Messages__ReadAllEventsCompleted
{
  ProtobufCMessage base;
  int64_t commit_position;
  int64_t prepare_position;
  size_t n_events;
  EventStore__Client__Messages__ResolvedEvent **events;
  int64_t next_commit_position;
  int64_t next_prepare_position;
  protobuf_c_boolean has_result;
  EventStore__Client__Messages__ReadAllEventsCompleted__ReadAllResult result;
  char *error;
};
#define EVENT_STORE__CLIENT__MESSAGES__READ_ALL_EVENTS_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__read_all_events_completed__descriptor) \
    , 0, 0, 0,NULL, 0, 0, 0,EVENT_STORE__CLIENT__MESSAGES__READ_ALL_EVENTS_COMPLETED__READ_ALL_RESULT__Success, NULL }


struct  _EventStore__Client__Messages__CreatePersistentSubscription
{
  ProtobufCMessage base;
  char *subscription_group_name;
  char *event_stream_id;
  protobuf_c_boolean resolve_link_tos;
  int32_t start_from;
  int32_t message_timeout_milliseconds;
  protobuf_c_boolean record_statistics;
  int32_t live_buffer_size;
  int32_t read_batch_size;
  int32_t buffer_size;
  int32_t max_retry_count;
  protobuf_c_boolean prefer_round_robin;
  int32_t checkpoint_after_time;
  int32_t checkpoint_max_count;
  int32_t checkpoint_min_count;
  int32_t subscriber_max_count;
  char *named_consumer_strategy;
};
#define EVENT_STORE__CLIENT__MESSAGES__CREATE_PERSISTENT_SUBSCRIPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__create_persistent_subscription__descriptor) \
    , NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL }


struct  _EventStore__Client__Messages__DeletePersistentSubscription
{
  ProtobufCMessage base;
  char *subscription_group_name;
  char *event_stream_id;
};
#define EVENT_STORE__CLIENT__MESSAGES__DELETE_PERSISTENT_SUBSCRIPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__delete_persistent_subscription__descriptor) \
    , NULL, NULL }


struct  _EventStore__Client__Messages__UpdatePersistentSubscription
{
  ProtobufCMessage base;
  char *subscription_group_name;
  char *event_stream_id;
  protobuf_c_boolean resolve_link_tos;
  int32_t start_from;
  int32_t message_timeout_milliseconds;
  protobuf_c_boolean record_statistics;
  int32_t live_buffer_size;
  int32_t read_batch_size;
  int32_t buffer_size;
  int32_t max_retry_count;
  protobuf_c_boolean prefer_round_robin;
  int32_t checkpoint_after_time;
  int32_t checkpoint_max_count;
  int32_t checkpoint_min_count;
  int32_t subscriber_max_count;
  char *named_consumer_strategy;
};
#define EVENT_STORE__CLIENT__MESSAGES__UPDATE_PERSISTENT_SUBSCRIPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__update_persistent_subscription__descriptor) \
    , NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL }


struct  _EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted
{
  ProtobufCMessage base;
  EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted__UpdatePersistentSubscriptionResult result;
  char *reason;
};
#define EVENT_STORE__CLIENT__MESSAGES__UPDATE_PERSISTENT_SUBSCRIPTION_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__update_persistent_subscription_completed__descriptor) \
    , EVENT_STORE__CLIENT__MESSAGES__UPDATE_PERSISTENT_SUBSCRIPTION_COMPLETED__UPDATE_PERSISTENT_SUBSCRIPTION_RESULT__Success, NULL }


struct  _EventStore__Client__Messages__CreatePersistentSubscriptionCompleted
{
  ProtobufCMessage base;
  EventStore__Client__Messages__CreatePersistentSubscriptionCompleted__CreatePersistentSubscriptionResult result;
  char *reason;
};
#define EVENT_STORE__CLIENT__MESSAGES__CREATE_PERSISTENT_SUBSCRIPTION_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__create_persistent_subscription_completed__descriptor) \
    , EVENT_STORE__CLIENT__MESSAGES__CREATE_PERSISTENT_SUBSCRIPTION_COMPLETED__CREATE_PERSISTENT_SUBSCRIPTION_RESULT__Success, NULL }


struct  _EventStore__Client__Messages__DeletePersistentSubscriptionCompleted
{
  ProtobufCMessage base;
  EventStore__Client__Messages__DeletePersistentSubscriptionCompleted__DeletePersistentSubscriptionResult result;
  char *reason;
};
#define EVENT_STORE__CLIENT__MESSAGES__DELETE_PERSISTENT_SUBSCRIPTION_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__delete_persistent_subscription_completed__descriptor) \
    , EVENT_STORE__CLIENT__MESSAGES__DELETE_PERSISTENT_SUBSCRIPTION_COMPLETED__DELETE_PERSISTENT_SUBSCRIPTION_RESULT__Success, NULL }


struct  _EventStore__Client__Messages__ConnectToPersistentSubscription
{
  ProtobufCMessage base;
  char *subscription_id;
  char *event_stream_id;
  int32_t allowed_in_flight_messages;
};
#define EVENT_STORE__CLIENT__MESSAGES__CONNECT_TO_PERSISTENT_SUBSCRIPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__connect_to_persistent_subscription__descriptor) \
    , NULL, NULL, 0 }


struct  _EventStore__Client__Messages__PersistentSubscriptionAckEvents
{
  ProtobufCMessage base;
  char *subscription_id;
  size_t n_processed_event_ids;
  ProtobufCBinaryData *processed_event_ids;
};
#define EVENT_STORE__CLIENT__MESSAGES__PERSISTENT_SUBSCRIPTION_ACK_EVENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__persistent_subscription_ack_events__descriptor) \
    , NULL, 0,NULL }


struct  _EventStore__Client__Messages__PersistentSubscriptionNakEvents
{
  ProtobufCMessage base;
  char *subscription_id;
  size_t n_processed_event_ids;
  ProtobufCBinaryData *processed_event_ids;
  char *message;
  EventStore__Client__Messages__PersistentSubscriptionNakEvents__NakAction action;
};
#define EVENT_STORE__CLIENT__MESSAGES__PERSISTENT_SUBSCRIPTION_NAK_EVENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__persistent_subscription_nak_events__descriptor) \
    , NULL, 0,NULL, NULL, EVENT_STORE__CLIENT__MESSAGES__PERSISTENT_SUBSCRIPTION_NAK_EVENTS__NAK_ACTION__Unknown }


struct  _EventStore__Client__Messages__PersistentSubscriptionConfirmation
{
  ProtobufCMessage base;
  int64_t last_commit_position;
  char *subscription_id;
  protobuf_c_boolean has_last_event_number;
  int32_t last_event_number;
};
#define EVENT_STORE__CLIENT__MESSAGES__PERSISTENT_SUBSCRIPTION_CONFIRMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__persistent_subscription_confirmation__descriptor) \
    , 0, NULL, 0,0 }


struct  _EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared
{
  ProtobufCMessage base;
  EventStore__Client__Messages__ResolvedIndexedEvent *event;
};
#define EVENT_STORE__CLIENT__MESSAGES__PERSISTENT_SUBSCRIPTION_STREAM_EVENT_APPEARED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__persistent_subscription_stream_event_appeared__descriptor) \
    , NULL }


struct  _EventStore__Client__Messages__SubscribeToStream
{
  ProtobufCMessage base;
  char *event_stream_id;
  protobuf_c_boolean resolve_link_tos;
};
#define EVENT_STORE__CLIENT__MESSAGES__SUBSCRIBE_TO_STREAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__subscribe_to_stream__descriptor) \
    , NULL, 0 }


struct  _EventStore__Client__Messages__SubscriptionConfirmation
{
  ProtobufCMessage base;
  int64_t last_commit_position;
  protobuf_c_boolean has_last_event_number;
  int32_t last_event_number;
};
#define EVENT_STORE__CLIENT__MESSAGES__SUBSCRIPTION_CONFIRMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__subscription_confirmation__descriptor) \
    , 0, 0,0 }


struct  _EventStore__Client__Messages__StreamEventAppeared
{
  ProtobufCMessage base;
  EventStore__Client__Messages__ResolvedEvent *event;
};
#define EVENT_STORE__CLIENT__MESSAGES__STREAM_EVENT_APPEARED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__stream_event_appeared__descriptor) \
    , NULL }


struct  _EventStore__Client__Messages__UnsubscribeFromStream
{
  ProtobufCMessage base;
};
#define EVENT_STORE__CLIENT__MESSAGES__UNSUBSCRIBE_FROM_STREAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__unsubscribe_from_stream__descriptor) \
     }


struct  _EventStore__Client__Messages__SubscriptionDropped
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reason;
  EventStore__Client__Messages__SubscriptionDropped__SubscriptionDropReason reason;
};
#define EVENT_STORE__CLIENT__MESSAGES__SUBSCRIPTION_DROPPED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__subscription_dropped__descriptor) \
    , 0,EVENT_STORE__CLIENT__MESSAGES__SUBSCRIPTION_DROPPED__SUBSCRIPTION_DROP_REASON__Unsubscribed }


struct  _EventStore__Client__Messages__NotHandled__MasterInfo
{
  ProtobufCMessage base;
  char *external_tcp_address;
  int32_t external_tcp_port;
  char *external_http_address;
  int32_t external_http_port;
  char *external_secure_tcp_address;
  protobuf_c_boolean has_external_secure_tcp_port;
  int32_t external_secure_tcp_port;
};
#define EVENT_STORE__CLIENT__MESSAGES__NOT_HANDLED__MASTER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__not_handled__master_info__descriptor) \
    , NULL, 0, NULL, 0, NULL, 0,0 }


struct  _EventStore__Client__Messages__NotHandled
{
  ProtobufCMessage base;
  EventStore__Client__Messages__NotHandled__NotHandledReason reason;
  protobuf_c_boolean has_additional_info;
  ProtobufCBinaryData additional_info;
};
#define EVENT_STORE__CLIENT__MESSAGES__NOT_HANDLED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__not_handled__descriptor) \
    , 0, 0,{0,NULL} }


struct  _EventStore__Client__Messages__ScavengeDatabase
{
  ProtobufCMessage base;
};
#define EVENT_STORE__CLIENT__MESSAGES__SCAVENGE_DATABASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__scavenge_database__descriptor) \
     }


struct  _EventStore__Client__Messages__ScavengeDatabaseCompleted
{
  ProtobufCMessage base;
  EventStore__Client__Messages__ScavengeDatabaseCompleted__ScavengeResult result;
  char *error;
  int32_t total_time_ms;
  int64_t total_space_saved;
};
#define EVENT_STORE__CLIENT__MESSAGES__SCAVENGE_DATABASE_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_store__client__messages__scavenge_database_completed__descriptor) \
    , 0, NULL, 0, 0 }


/* EventStore__Client__Messages__NewEvent methods */
void   event_store__client__messages__new_event__init
                     (EventStore__Client__Messages__NewEvent         *message);
size_t event_store__client__messages__new_event__get_packed_size
                     (const EventStore__Client__Messages__NewEvent   *message);
size_t event_store__client__messages__new_event__pack
                     (const EventStore__Client__Messages__NewEvent   *message,
                      uint8_t             *out);
size_t event_store__client__messages__new_event__pack_to_buffer
                     (const EventStore__Client__Messages__NewEvent   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__NewEvent *
       event_store__client__messages__new_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__new_event__free_unpacked
                     (EventStore__Client__Messages__NewEvent *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__EventRecord methods */
void   event_store__client__messages__event_record__init
                     (EventStore__Client__Messages__EventRecord         *message);
size_t event_store__client__messages__event_record__get_packed_size
                     (const EventStore__Client__Messages__EventRecord   *message);
size_t event_store__client__messages__event_record__pack
                     (const EventStore__Client__Messages__EventRecord   *message,
                      uint8_t             *out);
size_t event_store__client__messages__event_record__pack_to_buffer
                     (const EventStore__Client__Messages__EventRecord   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__EventRecord *
       event_store__client__messages__event_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__event_record__free_unpacked
                     (EventStore__Client__Messages__EventRecord *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__ResolvedIndexedEvent methods */
void   event_store__client__messages__resolved_indexed_event__init
                     (EventStore__Client__Messages__ResolvedIndexedEvent         *message);
size_t event_store__client__messages__resolved_indexed_event__get_packed_size
                     (const EventStore__Client__Messages__ResolvedIndexedEvent   *message);
size_t event_store__client__messages__resolved_indexed_event__pack
                     (const EventStore__Client__Messages__ResolvedIndexedEvent   *message,
                      uint8_t             *out);
size_t event_store__client__messages__resolved_indexed_event__pack_to_buffer
                     (const EventStore__Client__Messages__ResolvedIndexedEvent   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__ResolvedIndexedEvent *
       event_store__client__messages__resolved_indexed_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__resolved_indexed_event__free_unpacked
                     (EventStore__Client__Messages__ResolvedIndexedEvent *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__ResolvedEvent methods */
void   event_store__client__messages__resolved_event__init
                     (EventStore__Client__Messages__ResolvedEvent         *message);
size_t event_store__client__messages__resolved_event__get_packed_size
                     (const EventStore__Client__Messages__ResolvedEvent   *message);
size_t event_store__client__messages__resolved_event__pack
                     (const EventStore__Client__Messages__ResolvedEvent   *message,
                      uint8_t             *out);
size_t event_store__client__messages__resolved_event__pack_to_buffer
                     (const EventStore__Client__Messages__ResolvedEvent   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__ResolvedEvent *
       event_store__client__messages__resolved_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__resolved_event__free_unpacked
                     (EventStore__Client__Messages__ResolvedEvent *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__WriteEvents methods */
void   event_store__client__messages__write_events__init
                     (EventStore__Client__Messages__WriteEvents         *message);
size_t event_store__client__messages__write_events__get_packed_size
                     (const EventStore__Client__Messages__WriteEvents   *message);
size_t event_store__client__messages__write_events__pack
                     (const EventStore__Client__Messages__WriteEvents   *message,
                      uint8_t             *out);
size_t event_store__client__messages__write_events__pack_to_buffer
                     (const EventStore__Client__Messages__WriteEvents   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__WriteEvents *
       event_store__client__messages__write_events__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__write_events__free_unpacked
                     (EventStore__Client__Messages__WriteEvents *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__WriteEventsCompleted methods */
void   event_store__client__messages__write_events_completed__init
                     (EventStore__Client__Messages__WriteEventsCompleted         *message);
size_t event_store__client__messages__write_events_completed__get_packed_size
                     (const EventStore__Client__Messages__WriteEventsCompleted   *message);
size_t event_store__client__messages__write_events_completed__pack
                     (const EventStore__Client__Messages__WriteEventsCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__write_events_completed__pack_to_buffer
                     (const EventStore__Client__Messages__WriteEventsCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__WriteEventsCompleted *
       event_store__client__messages__write_events_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__write_events_completed__free_unpacked
                     (EventStore__Client__Messages__WriteEventsCompleted *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__DeleteStream methods */
void   event_store__client__messages__delete_stream__init
                     (EventStore__Client__Messages__DeleteStream         *message);
size_t event_store__client__messages__delete_stream__get_packed_size
                     (const EventStore__Client__Messages__DeleteStream   *message);
size_t event_store__client__messages__delete_stream__pack
                     (const EventStore__Client__Messages__DeleteStream   *message,
                      uint8_t             *out);
size_t event_store__client__messages__delete_stream__pack_to_buffer
                     (const EventStore__Client__Messages__DeleteStream   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__DeleteStream *
       event_store__client__messages__delete_stream__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__delete_stream__free_unpacked
                     (EventStore__Client__Messages__DeleteStream *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__DeleteStreamCompleted methods */
void   event_store__client__messages__delete_stream_completed__init
                     (EventStore__Client__Messages__DeleteStreamCompleted         *message);
size_t event_store__client__messages__delete_stream_completed__get_packed_size
                     (const EventStore__Client__Messages__DeleteStreamCompleted   *message);
size_t event_store__client__messages__delete_stream_completed__pack
                     (const EventStore__Client__Messages__DeleteStreamCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__delete_stream_completed__pack_to_buffer
                     (const EventStore__Client__Messages__DeleteStreamCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__DeleteStreamCompleted *
       event_store__client__messages__delete_stream_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__delete_stream_completed__free_unpacked
                     (EventStore__Client__Messages__DeleteStreamCompleted *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__TransactionStart methods */
void   event_store__client__messages__transaction_start__init
                     (EventStore__Client__Messages__TransactionStart         *message);
size_t event_store__client__messages__transaction_start__get_packed_size
                     (const EventStore__Client__Messages__TransactionStart   *message);
size_t event_store__client__messages__transaction_start__pack
                     (const EventStore__Client__Messages__TransactionStart   *message,
                      uint8_t             *out);
size_t event_store__client__messages__transaction_start__pack_to_buffer
                     (const EventStore__Client__Messages__TransactionStart   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__TransactionStart *
       event_store__client__messages__transaction_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__transaction_start__free_unpacked
                     (EventStore__Client__Messages__TransactionStart *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__TransactionStartCompleted methods */
void   event_store__client__messages__transaction_start_completed__init
                     (EventStore__Client__Messages__TransactionStartCompleted         *message);
size_t event_store__client__messages__transaction_start_completed__get_packed_size
                     (const EventStore__Client__Messages__TransactionStartCompleted   *message);
size_t event_store__client__messages__transaction_start_completed__pack
                     (const EventStore__Client__Messages__TransactionStartCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__transaction_start_completed__pack_to_buffer
                     (const EventStore__Client__Messages__TransactionStartCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__TransactionStartCompleted *
       event_store__client__messages__transaction_start_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__transaction_start_completed__free_unpacked
                     (EventStore__Client__Messages__TransactionStartCompleted *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__TransactionWrite methods */
void   event_store__client__messages__transaction_write__init
                     (EventStore__Client__Messages__TransactionWrite         *message);
size_t event_store__client__messages__transaction_write__get_packed_size
                     (const EventStore__Client__Messages__TransactionWrite   *message);
size_t event_store__client__messages__transaction_write__pack
                     (const EventStore__Client__Messages__TransactionWrite   *message,
                      uint8_t             *out);
size_t event_store__client__messages__transaction_write__pack_to_buffer
                     (const EventStore__Client__Messages__TransactionWrite   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__TransactionWrite *
       event_store__client__messages__transaction_write__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__transaction_write__free_unpacked
                     (EventStore__Client__Messages__TransactionWrite *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__TransactionWriteCompleted methods */
void   event_store__client__messages__transaction_write_completed__init
                     (EventStore__Client__Messages__TransactionWriteCompleted         *message);
size_t event_store__client__messages__transaction_write_completed__get_packed_size
                     (const EventStore__Client__Messages__TransactionWriteCompleted   *message);
size_t event_store__client__messages__transaction_write_completed__pack
                     (const EventStore__Client__Messages__TransactionWriteCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__transaction_write_completed__pack_to_buffer
                     (const EventStore__Client__Messages__TransactionWriteCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__TransactionWriteCompleted *
       event_store__client__messages__transaction_write_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__transaction_write_completed__free_unpacked
                     (EventStore__Client__Messages__TransactionWriteCompleted *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__TransactionCommit methods */
void   event_store__client__messages__transaction_commit__init
                     (EventStore__Client__Messages__TransactionCommit         *message);
size_t event_store__client__messages__transaction_commit__get_packed_size
                     (const EventStore__Client__Messages__TransactionCommit   *message);
size_t event_store__client__messages__transaction_commit__pack
                     (const EventStore__Client__Messages__TransactionCommit   *message,
                      uint8_t             *out);
size_t event_store__client__messages__transaction_commit__pack_to_buffer
                     (const EventStore__Client__Messages__TransactionCommit   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__TransactionCommit *
       event_store__client__messages__transaction_commit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__transaction_commit__free_unpacked
                     (EventStore__Client__Messages__TransactionCommit *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__TransactionCommitCompleted methods */
void   event_store__client__messages__transaction_commit_completed__init
                     (EventStore__Client__Messages__TransactionCommitCompleted         *message);
size_t event_store__client__messages__transaction_commit_completed__get_packed_size
                     (const EventStore__Client__Messages__TransactionCommitCompleted   *message);
size_t event_store__client__messages__transaction_commit_completed__pack
                     (const EventStore__Client__Messages__TransactionCommitCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__transaction_commit_completed__pack_to_buffer
                     (const EventStore__Client__Messages__TransactionCommitCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__TransactionCommitCompleted *
       event_store__client__messages__transaction_commit_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__transaction_commit_completed__free_unpacked
                     (EventStore__Client__Messages__TransactionCommitCompleted *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__ReadEvent methods */
void   event_store__client__messages__read_event__init
                     (EventStore__Client__Messages__ReadEvent         *message);
size_t event_store__client__messages__read_event__get_packed_size
                     (const EventStore__Client__Messages__ReadEvent   *message);
size_t event_store__client__messages__read_event__pack
                     (const EventStore__Client__Messages__ReadEvent   *message,
                      uint8_t             *out);
size_t event_store__client__messages__read_event__pack_to_buffer
                     (const EventStore__Client__Messages__ReadEvent   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__ReadEvent *
       event_store__client__messages__read_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__read_event__free_unpacked
                     (EventStore__Client__Messages__ReadEvent *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__ReadEventCompleted methods */
void   event_store__client__messages__read_event_completed__init
                     (EventStore__Client__Messages__ReadEventCompleted         *message);
size_t event_store__client__messages__read_event_completed__get_packed_size
                     (const EventStore__Client__Messages__ReadEventCompleted   *message);
size_t event_store__client__messages__read_event_completed__pack
                     (const EventStore__Client__Messages__ReadEventCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__read_event_completed__pack_to_buffer
                     (const EventStore__Client__Messages__ReadEventCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__ReadEventCompleted *
       event_store__client__messages__read_event_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__read_event_completed__free_unpacked
                     (EventStore__Client__Messages__ReadEventCompleted *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__ReadStreamEvents methods */
void   event_store__client__messages__read_stream_events__init
                     (EventStore__Client__Messages__ReadStreamEvents         *message);
size_t event_store__client__messages__read_stream_events__get_packed_size
                     (const EventStore__Client__Messages__ReadStreamEvents   *message);
size_t event_store__client__messages__read_stream_events__pack
                     (const EventStore__Client__Messages__ReadStreamEvents   *message,
                      uint8_t             *out);
size_t event_store__client__messages__read_stream_events__pack_to_buffer
                     (const EventStore__Client__Messages__ReadStreamEvents   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__ReadStreamEvents *
       event_store__client__messages__read_stream_events__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__read_stream_events__free_unpacked
                     (EventStore__Client__Messages__ReadStreamEvents *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__ReadStreamEventsCompleted methods */
void   event_store__client__messages__read_stream_events_completed__init
                     (EventStore__Client__Messages__ReadStreamEventsCompleted         *message);
size_t event_store__client__messages__read_stream_events_completed__get_packed_size
                     (const EventStore__Client__Messages__ReadStreamEventsCompleted   *message);
size_t event_store__client__messages__read_stream_events_completed__pack
                     (const EventStore__Client__Messages__ReadStreamEventsCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__read_stream_events_completed__pack_to_buffer
                     (const EventStore__Client__Messages__ReadStreamEventsCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__ReadStreamEventsCompleted *
       event_store__client__messages__read_stream_events_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__read_stream_events_completed__free_unpacked
                     (EventStore__Client__Messages__ReadStreamEventsCompleted *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__ReadAllEvents methods */
void   event_store__client__messages__read_all_events__init
                     (EventStore__Client__Messages__ReadAllEvents         *message);
size_t event_store__client__messages__read_all_events__get_packed_size
                     (const EventStore__Client__Messages__ReadAllEvents   *message);
size_t event_store__client__messages__read_all_events__pack
                     (const EventStore__Client__Messages__ReadAllEvents   *message,
                      uint8_t             *out);
size_t event_store__client__messages__read_all_events__pack_to_buffer
                     (const EventStore__Client__Messages__ReadAllEvents   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__ReadAllEvents *
       event_store__client__messages__read_all_events__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__read_all_events__free_unpacked
                     (EventStore__Client__Messages__ReadAllEvents *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__ReadAllEventsCompleted methods */
void   event_store__client__messages__read_all_events_completed__init
                     (EventStore__Client__Messages__ReadAllEventsCompleted         *message);
size_t event_store__client__messages__read_all_events_completed__get_packed_size
                     (const EventStore__Client__Messages__ReadAllEventsCompleted   *message);
size_t event_store__client__messages__read_all_events_completed__pack
                     (const EventStore__Client__Messages__ReadAllEventsCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__read_all_events_completed__pack_to_buffer
                     (const EventStore__Client__Messages__ReadAllEventsCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__ReadAllEventsCompleted *
       event_store__client__messages__read_all_events_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__read_all_events_completed__free_unpacked
                     (EventStore__Client__Messages__ReadAllEventsCompleted *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__CreatePersistentSubscription methods */
void   event_store__client__messages__create_persistent_subscription__init
                     (EventStore__Client__Messages__CreatePersistentSubscription         *message);
size_t event_store__client__messages__create_persistent_subscription__get_packed_size
                     (const EventStore__Client__Messages__CreatePersistentSubscription   *message);
size_t event_store__client__messages__create_persistent_subscription__pack
                     (const EventStore__Client__Messages__CreatePersistentSubscription   *message,
                      uint8_t             *out);
size_t event_store__client__messages__create_persistent_subscription__pack_to_buffer
                     (const EventStore__Client__Messages__CreatePersistentSubscription   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__CreatePersistentSubscription *
       event_store__client__messages__create_persistent_subscription__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__create_persistent_subscription__free_unpacked
                     (EventStore__Client__Messages__CreatePersistentSubscription *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__DeletePersistentSubscription methods */
void   event_store__client__messages__delete_persistent_subscription__init
                     (EventStore__Client__Messages__DeletePersistentSubscription         *message);
size_t event_store__client__messages__delete_persistent_subscription__get_packed_size
                     (const EventStore__Client__Messages__DeletePersistentSubscription   *message);
size_t event_store__client__messages__delete_persistent_subscription__pack
                     (const EventStore__Client__Messages__DeletePersistentSubscription   *message,
                      uint8_t             *out);
size_t event_store__client__messages__delete_persistent_subscription__pack_to_buffer
                     (const EventStore__Client__Messages__DeletePersistentSubscription   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__DeletePersistentSubscription *
       event_store__client__messages__delete_persistent_subscription__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__delete_persistent_subscription__free_unpacked
                     (EventStore__Client__Messages__DeletePersistentSubscription *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__UpdatePersistentSubscription methods */
void   event_store__client__messages__update_persistent_subscription__init
                     (EventStore__Client__Messages__UpdatePersistentSubscription         *message);
size_t event_store__client__messages__update_persistent_subscription__get_packed_size
                     (const EventStore__Client__Messages__UpdatePersistentSubscription   *message);
size_t event_store__client__messages__update_persistent_subscription__pack
                     (const EventStore__Client__Messages__UpdatePersistentSubscription   *message,
                      uint8_t             *out);
size_t event_store__client__messages__update_persistent_subscription__pack_to_buffer
                     (const EventStore__Client__Messages__UpdatePersistentSubscription   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__UpdatePersistentSubscription *
       event_store__client__messages__update_persistent_subscription__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__update_persistent_subscription__free_unpacked
                     (EventStore__Client__Messages__UpdatePersistentSubscription *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted methods */
void   event_store__client__messages__update_persistent_subscription_completed__init
                     (EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted         *message);
size_t event_store__client__messages__update_persistent_subscription_completed__get_packed_size
                     (const EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted   *message);
size_t event_store__client__messages__update_persistent_subscription_completed__pack
                     (const EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__update_persistent_subscription_completed__pack_to_buffer
                     (const EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted *
       event_store__client__messages__update_persistent_subscription_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__update_persistent_subscription_completed__free_unpacked
                     (EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__CreatePersistentSubscriptionCompleted methods */
void   event_store__client__messages__create_persistent_subscription_completed__init
                     (EventStore__Client__Messages__CreatePersistentSubscriptionCompleted         *message);
size_t event_store__client__messages__create_persistent_subscription_completed__get_packed_size
                     (const EventStore__Client__Messages__CreatePersistentSubscriptionCompleted   *message);
size_t event_store__client__messages__create_persistent_subscription_completed__pack
                     (const EventStore__Client__Messages__CreatePersistentSubscriptionCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__create_persistent_subscription_completed__pack_to_buffer
                     (const EventStore__Client__Messages__CreatePersistentSubscriptionCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__CreatePersistentSubscriptionCompleted *
       event_store__client__messages__create_persistent_subscription_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__create_persistent_subscription_completed__free_unpacked
                     (EventStore__Client__Messages__CreatePersistentSubscriptionCompleted *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__DeletePersistentSubscriptionCompleted methods */
void   event_store__client__messages__delete_persistent_subscription_completed__init
                     (EventStore__Client__Messages__DeletePersistentSubscriptionCompleted         *message);
size_t event_store__client__messages__delete_persistent_subscription_completed__get_packed_size
                     (const EventStore__Client__Messages__DeletePersistentSubscriptionCompleted   *message);
size_t event_store__client__messages__delete_persistent_subscription_completed__pack
                     (const EventStore__Client__Messages__DeletePersistentSubscriptionCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__delete_persistent_subscription_completed__pack_to_buffer
                     (const EventStore__Client__Messages__DeletePersistentSubscriptionCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__DeletePersistentSubscriptionCompleted *
       event_store__client__messages__delete_persistent_subscription_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__delete_persistent_subscription_completed__free_unpacked
                     (EventStore__Client__Messages__DeletePersistentSubscriptionCompleted *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__ConnectToPersistentSubscription methods */
void   event_store__client__messages__connect_to_persistent_subscription__init
                     (EventStore__Client__Messages__ConnectToPersistentSubscription         *message);
size_t event_store__client__messages__connect_to_persistent_subscription__get_packed_size
                     (const EventStore__Client__Messages__ConnectToPersistentSubscription   *message);
size_t event_store__client__messages__connect_to_persistent_subscription__pack
                     (const EventStore__Client__Messages__ConnectToPersistentSubscription   *message,
                      uint8_t             *out);
size_t event_store__client__messages__connect_to_persistent_subscription__pack_to_buffer
                     (const EventStore__Client__Messages__ConnectToPersistentSubscription   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__ConnectToPersistentSubscription *
       event_store__client__messages__connect_to_persistent_subscription__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__connect_to_persistent_subscription__free_unpacked
                     (EventStore__Client__Messages__ConnectToPersistentSubscription *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__PersistentSubscriptionAckEvents methods */
void   event_store__client__messages__persistent_subscription_ack_events__init
                     (EventStore__Client__Messages__PersistentSubscriptionAckEvents         *message);
size_t event_store__client__messages__persistent_subscription_ack_events__get_packed_size
                     (const EventStore__Client__Messages__PersistentSubscriptionAckEvents   *message);
size_t event_store__client__messages__persistent_subscription_ack_events__pack
                     (const EventStore__Client__Messages__PersistentSubscriptionAckEvents   *message,
                      uint8_t             *out);
size_t event_store__client__messages__persistent_subscription_ack_events__pack_to_buffer
                     (const EventStore__Client__Messages__PersistentSubscriptionAckEvents   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__PersistentSubscriptionAckEvents *
       event_store__client__messages__persistent_subscription_ack_events__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__persistent_subscription_ack_events__free_unpacked
                     (EventStore__Client__Messages__PersistentSubscriptionAckEvents *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__PersistentSubscriptionNakEvents methods */
void   event_store__client__messages__persistent_subscription_nak_events__init
                     (EventStore__Client__Messages__PersistentSubscriptionNakEvents         *message);
size_t event_store__client__messages__persistent_subscription_nak_events__get_packed_size
                     (const EventStore__Client__Messages__PersistentSubscriptionNakEvents   *message);
size_t event_store__client__messages__persistent_subscription_nak_events__pack
                     (const EventStore__Client__Messages__PersistentSubscriptionNakEvents   *message,
                      uint8_t             *out);
size_t event_store__client__messages__persistent_subscription_nak_events__pack_to_buffer
                     (const EventStore__Client__Messages__PersistentSubscriptionNakEvents   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__PersistentSubscriptionNakEvents *
       event_store__client__messages__persistent_subscription_nak_events__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__persistent_subscription_nak_events__free_unpacked
                     (EventStore__Client__Messages__PersistentSubscriptionNakEvents *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__PersistentSubscriptionConfirmation methods */
void   event_store__client__messages__persistent_subscription_confirmation__init
                     (EventStore__Client__Messages__PersistentSubscriptionConfirmation         *message);
size_t event_store__client__messages__persistent_subscription_confirmation__get_packed_size
                     (const EventStore__Client__Messages__PersistentSubscriptionConfirmation   *message);
size_t event_store__client__messages__persistent_subscription_confirmation__pack
                     (const EventStore__Client__Messages__PersistentSubscriptionConfirmation   *message,
                      uint8_t             *out);
size_t event_store__client__messages__persistent_subscription_confirmation__pack_to_buffer
                     (const EventStore__Client__Messages__PersistentSubscriptionConfirmation   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__PersistentSubscriptionConfirmation *
       event_store__client__messages__persistent_subscription_confirmation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__persistent_subscription_confirmation__free_unpacked
                     (EventStore__Client__Messages__PersistentSubscriptionConfirmation *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared methods */
void   event_store__client__messages__persistent_subscription_stream_event_appeared__init
                     (EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared         *message);
size_t event_store__client__messages__persistent_subscription_stream_event_appeared__get_packed_size
                     (const EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared   *message);
size_t event_store__client__messages__persistent_subscription_stream_event_appeared__pack
                     (const EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared   *message,
                      uint8_t             *out);
size_t event_store__client__messages__persistent_subscription_stream_event_appeared__pack_to_buffer
                     (const EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared *
       event_store__client__messages__persistent_subscription_stream_event_appeared__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__persistent_subscription_stream_event_appeared__free_unpacked
                     (EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__SubscribeToStream methods */
void   event_store__client__messages__subscribe_to_stream__init
                     (EventStore__Client__Messages__SubscribeToStream         *message);
size_t event_store__client__messages__subscribe_to_stream__get_packed_size
                     (const EventStore__Client__Messages__SubscribeToStream   *message);
size_t event_store__client__messages__subscribe_to_stream__pack
                     (const EventStore__Client__Messages__SubscribeToStream   *message,
                      uint8_t             *out);
size_t event_store__client__messages__subscribe_to_stream__pack_to_buffer
                     (const EventStore__Client__Messages__SubscribeToStream   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__SubscribeToStream *
       event_store__client__messages__subscribe_to_stream__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__subscribe_to_stream__free_unpacked
                     (EventStore__Client__Messages__SubscribeToStream *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__SubscriptionConfirmation methods */
void   event_store__client__messages__subscription_confirmation__init
                     (EventStore__Client__Messages__SubscriptionConfirmation         *message);
size_t event_store__client__messages__subscription_confirmation__get_packed_size
                     (const EventStore__Client__Messages__SubscriptionConfirmation   *message);
size_t event_store__client__messages__subscription_confirmation__pack
                     (const EventStore__Client__Messages__SubscriptionConfirmation   *message,
                      uint8_t             *out);
size_t event_store__client__messages__subscription_confirmation__pack_to_buffer
                     (const EventStore__Client__Messages__SubscriptionConfirmation   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__SubscriptionConfirmation *
       event_store__client__messages__subscription_confirmation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__subscription_confirmation__free_unpacked
                     (EventStore__Client__Messages__SubscriptionConfirmation *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__StreamEventAppeared methods */
void   event_store__client__messages__stream_event_appeared__init
                     (EventStore__Client__Messages__StreamEventAppeared         *message);
size_t event_store__client__messages__stream_event_appeared__get_packed_size
                     (const EventStore__Client__Messages__StreamEventAppeared   *message);
size_t event_store__client__messages__stream_event_appeared__pack
                     (const EventStore__Client__Messages__StreamEventAppeared   *message,
                      uint8_t             *out);
size_t event_store__client__messages__stream_event_appeared__pack_to_buffer
                     (const EventStore__Client__Messages__StreamEventAppeared   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__StreamEventAppeared *
       event_store__client__messages__stream_event_appeared__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__stream_event_appeared__free_unpacked
                     (EventStore__Client__Messages__StreamEventAppeared *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__UnsubscribeFromStream methods */
void   event_store__client__messages__unsubscribe_from_stream__init
                     (EventStore__Client__Messages__UnsubscribeFromStream         *message);
size_t event_store__client__messages__unsubscribe_from_stream__get_packed_size
                     (const EventStore__Client__Messages__UnsubscribeFromStream   *message);
size_t event_store__client__messages__unsubscribe_from_stream__pack
                     (const EventStore__Client__Messages__UnsubscribeFromStream   *message,
                      uint8_t             *out);
size_t event_store__client__messages__unsubscribe_from_stream__pack_to_buffer
                     (const EventStore__Client__Messages__UnsubscribeFromStream   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__UnsubscribeFromStream *
       event_store__client__messages__unsubscribe_from_stream__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__unsubscribe_from_stream__free_unpacked
                     (EventStore__Client__Messages__UnsubscribeFromStream *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__SubscriptionDropped methods */
void   event_store__client__messages__subscription_dropped__init
                     (EventStore__Client__Messages__SubscriptionDropped         *message);
size_t event_store__client__messages__subscription_dropped__get_packed_size
                     (const EventStore__Client__Messages__SubscriptionDropped   *message);
size_t event_store__client__messages__subscription_dropped__pack
                     (const EventStore__Client__Messages__SubscriptionDropped   *message,
                      uint8_t             *out);
size_t event_store__client__messages__subscription_dropped__pack_to_buffer
                     (const EventStore__Client__Messages__SubscriptionDropped   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__SubscriptionDropped *
       event_store__client__messages__subscription_dropped__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__subscription_dropped__free_unpacked
                     (EventStore__Client__Messages__SubscriptionDropped *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__NotHandled__MasterInfo methods */
void   event_store__client__messages__not_handled__master_info__init
                     (EventStore__Client__Messages__NotHandled__MasterInfo         *message);
/* EventStore__Client__Messages__NotHandled methods */
void   event_store__client__messages__not_handled__init
                     (EventStore__Client__Messages__NotHandled         *message);
size_t event_store__client__messages__not_handled__get_packed_size
                     (const EventStore__Client__Messages__NotHandled   *message);
size_t event_store__client__messages__not_handled__pack
                     (const EventStore__Client__Messages__NotHandled   *message,
                      uint8_t             *out);
size_t event_store__client__messages__not_handled__pack_to_buffer
                     (const EventStore__Client__Messages__NotHandled   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__NotHandled *
       event_store__client__messages__not_handled__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__not_handled__free_unpacked
                     (EventStore__Client__Messages__NotHandled *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__ScavengeDatabase methods */
void   event_store__client__messages__scavenge_database__init
                     (EventStore__Client__Messages__ScavengeDatabase         *message);
size_t event_store__client__messages__scavenge_database__get_packed_size
                     (const EventStore__Client__Messages__ScavengeDatabase   *message);
size_t event_store__client__messages__scavenge_database__pack
                     (const EventStore__Client__Messages__ScavengeDatabase   *message,
                      uint8_t             *out);
size_t event_store__client__messages__scavenge_database__pack_to_buffer
                     (const EventStore__Client__Messages__ScavengeDatabase   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__ScavengeDatabase *
       event_store__client__messages__scavenge_database__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__scavenge_database__free_unpacked
                     (EventStore__Client__Messages__ScavengeDatabase *message,
                      ProtobufCAllocator *allocator);
/* EventStore__Client__Messages__ScavengeDatabaseCompleted methods */
void   event_store__client__messages__scavenge_database_completed__init
                     (EventStore__Client__Messages__ScavengeDatabaseCompleted         *message);
size_t event_store__client__messages__scavenge_database_completed__get_packed_size
                     (const EventStore__Client__Messages__ScavengeDatabaseCompleted   *message);
size_t event_store__client__messages__scavenge_database_completed__pack
                     (const EventStore__Client__Messages__ScavengeDatabaseCompleted   *message,
                      uint8_t             *out);
size_t event_store__client__messages__scavenge_database_completed__pack_to_buffer
                     (const EventStore__Client__Messages__ScavengeDatabaseCompleted   *message,
                      ProtobufCBuffer     *buffer);
EventStore__Client__Messages__ScavengeDatabaseCompleted *
       event_store__client__messages__scavenge_database_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_store__client__messages__scavenge_database_completed__free_unpacked
                     (EventStore__Client__Messages__ScavengeDatabaseCompleted *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*EventStore__Client__Messages__NewEvent_Closure)
                 (const EventStore__Client__Messages__NewEvent *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__EventRecord_Closure)
                 (const EventStore__Client__Messages__EventRecord *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__ResolvedIndexedEvent_Closure)
                 (const EventStore__Client__Messages__ResolvedIndexedEvent *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__ResolvedEvent_Closure)
                 (const EventStore__Client__Messages__ResolvedEvent *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__WriteEvents_Closure)
                 (const EventStore__Client__Messages__WriteEvents *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__WriteEventsCompleted_Closure)
                 (const EventStore__Client__Messages__WriteEventsCompleted *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__DeleteStream_Closure)
                 (const EventStore__Client__Messages__DeleteStream *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__DeleteStreamCompleted_Closure)
                 (const EventStore__Client__Messages__DeleteStreamCompleted *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__TransactionStart_Closure)
                 (const EventStore__Client__Messages__TransactionStart *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__TransactionStartCompleted_Closure)
                 (const EventStore__Client__Messages__TransactionStartCompleted *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__TransactionWrite_Closure)
                 (const EventStore__Client__Messages__TransactionWrite *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__TransactionWriteCompleted_Closure)
                 (const EventStore__Client__Messages__TransactionWriteCompleted *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__TransactionCommit_Closure)
                 (const EventStore__Client__Messages__TransactionCommit *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__TransactionCommitCompleted_Closure)
                 (const EventStore__Client__Messages__TransactionCommitCompleted *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__ReadEvent_Closure)
                 (const EventStore__Client__Messages__ReadEvent *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__ReadEventCompleted_Closure)
                 (const EventStore__Client__Messages__ReadEventCompleted *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__ReadStreamEvents_Closure)
                 (const EventStore__Client__Messages__ReadStreamEvents *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__ReadStreamEventsCompleted_Closure)
                 (const EventStore__Client__Messages__ReadStreamEventsCompleted *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__ReadAllEvents_Closure)
                 (const EventStore__Client__Messages__ReadAllEvents *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__ReadAllEventsCompleted_Closure)
                 (const EventStore__Client__Messages__ReadAllEventsCompleted *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__CreatePersistentSubscription_Closure)
                 (const EventStore__Client__Messages__CreatePersistentSubscription *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__DeletePersistentSubscription_Closure)
                 (const EventStore__Client__Messages__DeletePersistentSubscription *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__UpdatePersistentSubscription_Closure)
                 (const EventStore__Client__Messages__UpdatePersistentSubscription *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted_Closure)
                 (const EventStore__Client__Messages__UpdatePersistentSubscriptionCompleted *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__CreatePersistentSubscriptionCompleted_Closure)
                 (const EventStore__Client__Messages__CreatePersistentSubscriptionCompleted *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__DeletePersistentSubscriptionCompleted_Closure)
                 (const EventStore__Client__Messages__DeletePersistentSubscriptionCompleted *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__ConnectToPersistentSubscription_Closure)
                 (const EventStore__Client__Messages__ConnectToPersistentSubscription *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__PersistentSubscriptionAckEvents_Closure)
                 (const EventStore__Client__Messages__PersistentSubscriptionAckEvents *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__PersistentSubscriptionNakEvents_Closure)
                 (const EventStore__Client__Messages__PersistentSubscriptionNakEvents *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__PersistentSubscriptionConfirmation_Closure)
                 (const EventStore__Client__Messages__PersistentSubscriptionConfirmation *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared_Closure)
                 (const EventStore__Client__Messages__PersistentSubscriptionStreamEventAppeared *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__SubscribeToStream_Closure)
                 (const EventStore__Client__Messages__SubscribeToStream *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__SubscriptionConfirmation_Closure)
                 (const EventStore__Client__Messages__SubscriptionConfirmation *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__StreamEventAppeared_Closure)
                 (const EventStore__Client__Messages__StreamEventAppeared *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__UnsubscribeFromStream_Closure)
                 (const EventStore__Client__Messages__UnsubscribeFromStream *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__SubscriptionDropped_Closure)
                 (const EventStore__Client__Messages__SubscriptionDropped *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__NotHandled__MasterInfo_Closure)
                 (const EventStore__Client__Messages__NotHandled__MasterInfo *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__NotHandled_Closure)
                 (const EventStore__Client__Messages__NotHandled *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__ScavengeDatabase_Closure)
                 (const EventStore__Client__Messages__ScavengeDatabase *message,
                  void *closure_data);
typedef void (*EventStore__Client__Messages__ScavengeDatabaseCompleted_Closure)
                 (const EventStore__Client__Messages__ScavengeDatabaseCompleted *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    event_store__client__messages__operation_result__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__new_event__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__event_record__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__resolved_indexed_event__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__resolved_event__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__write_events__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__write_events_completed__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__delete_stream__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__delete_stream_completed__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__transaction_start__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__transaction_start_completed__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__transaction_write__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__transaction_write_completed__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__transaction_commit__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__transaction_commit_completed__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__read_event__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__read_event_completed__descriptor;
extern const ProtobufCEnumDescriptor    event_store__client__messages__read_event_completed__read_event_result__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__read_stream_events__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__read_stream_events_completed__descriptor;
extern const ProtobufCEnumDescriptor    event_store__client__messages__read_stream_events_completed__read_stream_result__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__read_all_events__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__read_all_events_completed__descriptor;
extern const ProtobufCEnumDescriptor    event_store__client__messages__read_all_events_completed__read_all_result__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__create_persistent_subscription__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__delete_persistent_subscription__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__update_persistent_subscription__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__update_persistent_subscription_completed__descriptor;
extern const ProtobufCEnumDescriptor    event_store__client__messages__update_persistent_subscription_completed__update_persistent_subscription_result__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__create_persistent_subscription_completed__descriptor;
extern const ProtobufCEnumDescriptor    event_store__client__messages__create_persistent_subscription_completed__create_persistent_subscription_result__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__delete_persistent_subscription_completed__descriptor;
extern const ProtobufCEnumDescriptor    event_store__client__messages__delete_persistent_subscription_completed__delete_persistent_subscription_result__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__connect_to_persistent_subscription__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__persistent_subscription_ack_events__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__persistent_subscription_nak_events__descriptor;
extern const ProtobufCEnumDescriptor    event_store__client__messages__persistent_subscription_nak_events__nak_action__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__persistent_subscription_confirmation__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__persistent_subscription_stream_event_appeared__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__subscribe_to_stream__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__subscription_confirmation__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__stream_event_appeared__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__unsubscribe_from_stream__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__subscription_dropped__descriptor;
extern const ProtobufCEnumDescriptor    event_store__client__messages__subscription_dropped__subscription_drop_reason__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__not_handled__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__not_handled__master_info__descriptor;
extern const ProtobufCEnumDescriptor    event_store__client__messages__not_handled__not_handled_reason__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__scavenge_database__descriptor;
extern const ProtobufCMessageDescriptor event_store__client__messages__scavenge_database_completed__descriptor;
extern const ProtobufCEnumDescriptor    event_store__client__messages__scavenge_database_completed__scavenge_result__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ClientMessageDtos_2eproto__INCLUDED */
